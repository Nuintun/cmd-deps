/**
 * @module cmd-deps
 * @author nuintun
 * @license MIT
 * @version 3.0.0
 * @description Transform cmd and get cmd dependences
 * @see https://nuintun.github.io/cmd-deps
 */
"use strict";const acorn=require("acorn"),toString=Object.prototype.toString;function string(e){return"[object String]"===toString.call(e)}function fn(e){return"[object Function]"===toString.call(e)}function object(e){return"[object Object]"===toString.call(e)}function defined(){const e=arguments,t=e.length;for(let n=0;n<t;n++){const t=e[n];if(void 0!==t)return t}}function encode(e){return e.replace(/['"]/g,"\\$&")}function parse(e,t){return t=t||{},acorn.parse(e,{sourceType:t.sourceType,ranges:defined(t.ranges,!1),locations:defined(t.locations,null),ecmaVersion:defined(t.ecmaVersion,6),allowHashBang:defined(t.allowHashBang,!0),allowReserved:defined(t.allowReserved,!0),allowReturnOutsideFunction:defined(t.allowReturnOutsideFunction,!0),allowImportExportEverywhere:defined(t.allowImportExportEverywhere,!0)})}function traverse(e,t){if(!1!==t.call(null,e))for(let n in e)if(e.hasOwnProperty(n)){let r=e[n];null!==r&&"object"==typeof r&&traverse(r,t)}}function visit(e,t,n){let r;try{r=parse(e,t)}catch(e){}r&&traverse(r,n)}function isRequire(e,t,n){if("CallExpression"===e.type)return e=e.callee,n.length&&"MemberExpression"===e.type?"Identifier"===e.object.type&&e.object.name===t&&("Identifier"===e.property.type&&-1!==n.indexOf(e.property.name)||"Literal"===e.property.type&&-1!==n.indexOf(e.property.value)):"Identifier"===e.type&&e.name===t}function parser(e,t,n){let r=0;const o=[];if(t&&object(t)&&(n=t,t=null),n=n||{},string(e)||(e=""),string(n.word)||(n.word="require"),!new RegExp(`\\b${n.word}\\b`).test(e))return{code:e,dependencies:o};Array.isArray(n.flags)||(n.flags=[]),t&&!fn(t)&&(t=null);const i=(n,i)=>{let l;const s=n.value;o.push({flag:i,path:s}),t&&(l=t(s,i))&&string(l)&&(l=encode(l),e=e.substring(0,n.start+r+1)+l+e.substring(n.end+r-1),r+=l.length-s.length)};return visit(e,n.acorn,e=>{if(isRequire(e,n.word,n.flags)){let t=e.arguments;const n=e.callee.property,r=n?n.name:null;t.length&&("Literal"===(t=t[0]).type?i(t,r):"ArrayExpression"===t.type&&t.elements.forEach(e=>{"Literal"===e.type&&i(e,r)}))}}),{code:e,dependencies:o}}module.exports=parser;